import tkinter as tk
from tkinter import messagebox

class TicTacToeGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic Tac Toe")
        self.current_player = "X"
        self.board = [["" for _ in range(3)] for _ in range(3)]
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        
        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(master, text="", font=("Arial", 24), width=5, height=2,
                                                command=lambda row=i, col=j: self.click(row, col))
                self.buttons[i][j].grid(row=i, column=j)
        
        self.status_label = tk.Label(master, text=f"Player {self.current_player}'s turn", font=("Arial", 16))
        self.status_label.grid(row=3, columnspan=3)

    def click(self, row, col):
        if self.board[row][col] == "":
            self.board[row][col] = self.current_player
            self.buttons[row][col].config(text=self.current_player, state="disabled")
            if self.check_win(row, col):
                messagebox.showinfo("Winner", f"Player {self.current_player} wins!")
                self.reset_board()
            elif self.check_draw():
                messagebox.showinfo("Draw", "It's a draw!")
                self.reset_board()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                self.status_label.config(text=f"Player {self.current_player}'s turn")

    def check_win(self, row, col):
        player = self.board[row][col]
        # Check row
        if all(self.board[row][c] == player for c in range(3)):
            return True
        # Check column
        if all(self.board[r][col] == player for r in range(3)):
            return True
        # Check diagonals
        if row == col and all(self.board[i][i] == player for i in range(3)):
            return True
        if row + col == 2 and all(self.board[i][2-i] == player for i in range(3)):
            return True
        return False

    def check_draw(self):
        return all(self.board[i][j] != "" for i in range(3) for j in range(3))

    def reset_board(self):
        for i in range(3):
            for j in range(3):
                self.board[i][j] = ""
                self.buttons[i][j].config(text="", state="normal")
        self.current_player = "X"
        self.status_label.config(text=f"Player {self.current_player}'s turn")

def main():
    root = tk.Tk()
    game = TicTacToeGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()
